import { NextRequest, NextResponse } from 'next/server'

import acceptLanguage from 'accept-language'
import { fallbacklanguage, languages, cookieName } from 'i18n/settings'

acceptLanguage.languages(languages)

export const config = {
  // matcher: '/:lng*'
  // matcher: ['/((?!api|_next/static|_next/images|assets|favicon.ico|sw.js).*)'],
  matcher: '/((?!api|static|.*\\..*|_next).*)',
}

export const middleware = async (req: NextRequest): Promise<NextResponse | undefined> => {
  let lng

  if (req.cookies.has(cookieName)) lng = acceptLanguage.get(req.cookies.get(cookieName)?.value)
  if (!lng) lng = acceptLanguage.get(req.headers.get('Accept-Language'))
  if (!lng) lng = fallbacklanguage

  // * Redirect if lng in path is not supported
  if (
    !languages.some((loc) => req.nextUrl.pathname.split('/')[1] === `${loc}`) &&
    !req.nextUrl.pathname.startsWith('/_next')
  ) {
    return NextResponse.redirect(new URL(`/${lng}${req.nextUrl.pathname}`, req.url))
  }

  if (req.headers.has('referer')) {
    const refererUrl = new URL(req.headers.get('referer')!) // * Use Non-null assertion
    const lngInReferer = languages.find((l) => refererUrl.pathname.startsWith(`/${l}`))
    const response = NextResponse.next()

    if (lngInReferer) {
      response.cookies.set(cookieName, lngInReferer)
    }

    return response
  }

  return NextResponse.next()
}
